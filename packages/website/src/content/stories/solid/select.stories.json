{
  "Basic": "import { Select } from '@ark-ui/solid'\nimport { Index, Portal } from 'solid-js/web'\n\nconst Basic = () => {\n  const items = ['React', 'Solid', 'Vue']\n  return (\n    <Select.Root items={items}>\n      <Select.Label>Framework</Select.Label>\n      <Select.Control>\n        <Select.Trigger>\n          <Select.ValueText placeholder=\"Select a Framework\" />\n          <Select.Indicator>▼</Select.Indicator>\n        </Select.Trigger>\n        <Select.ClearTrigger>Clear</Select.ClearTrigger>\n      </Select.Control>\n      <Portal>\n        <Select.Positioner>\n          <Select.Content>\n            <Select.ItemGroup id=\"framework\">\n              <Select.ItemGroupLabel for=\"framework\">Frameworks</Select.ItemGroupLabel>\n              <Index each={items}>\n                {(item) => (\n                  <Select.Item item={item()}>\n                    <Select.ItemText>{item()}</Select.ItemText>\n                    <Select.ItemIndicator>✓</Select.ItemIndicator>\n                  </Select.Item>\n                )}\n              </Index>\n            </Select.ItemGroup>\n          </Select.Content>\n        </Select.Positioner>\n      </Portal>\n    </Select.Root>\n  )\n}\n",
  "Advanced": "import { Select } from '@ark-ui/solid'\nimport { Index, Portal } from 'solid-js/web'\n\nconst Advanced = () => {\n  type Item = { label: string; value: string; disabled?: boolean }\n  const items: Item[] = [\n    { label: 'React', value: 'react' },\n    { label: 'Solid', value: 'solid' },\n    { label: 'Vue', value: 'vue' },\n    { label: 'Svelte', value: 'svelte', disabled: true },\n  ]\n  return (\n    <Select.Root items={items}>\n      <Select.Label>Framework</Select.Label>\n      <Select.Control>\n        <Select.Trigger>\n          <Select.ValueText placeholder=\"Select a Framework\" />\n        </Select.Trigger>\n        <Select.ClearTrigger>Clear</Select.ClearTrigger>\n      </Select.Control>\n      <Portal>\n        <Select.Positioner>\n          <Select.Content>\n            <Select.ItemGroup id=\"framework\">\n              <Select.ItemGroupLabel for=\"framework\">Frameworks</Select.ItemGroupLabel>\n              <Index each={items}>\n                {(item) => (\n                  <Select.Item item={item()}>\n                    <Select.ItemText>{item().label}</Select.ItemText>\n                    <Select.ItemIndicator>✓</Select.ItemIndicator>\n                  </Select.Item>\n                )}\n              </Index>\n            </Select.ItemGroup>\n          </Select.Content>\n        </Select.Positioner>\n      </Portal>\n    </Select.Root>\n  )\n}\n",
  "Multiple": "import { Select } from '@ark-ui/solid'\nimport { Index, Portal } from 'solid-js/web'\n\nconst Multiple = () => {\n  type Item = { label: string; value: string; disabled?: boolean }\n  const items: Item[] = [\n    { label: 'React', value: 'react' },\n    { label: 'Solid', value: 'solid' },\n    { label: 'Vue', value: 'vue' },\n    { label: 'Svelte', value: 'svelte', disabled: true },\n  ]\n  return (\n    <Select.Root items={items} multiple>\n      <Select.Label>Framework</Select.Label>\n      <Select.Control>\n        <Select.Trigger>\n          <Select.ValueText placeholder=\"Select a Framework\" />\n        </Select.Trigger>\n        <Select.ClearTrigger>Clear</Select.ClearTrigger>\n      </Select.Control>\n      <Portal>\n        <Select.Positioner>\n          <Select.Content>\n            <Select.ItemGroup id=\"framework\">\n              <Index each={items}>\n                {(item) => (\n                  <Select.Item item={item()}>\n                    <Select.ItemText>{item().label}</Select.ItemText>\n                    <Select.ItemIndicator>✓</Select.ItemIndicator>\n                  </Select.Item>\n                )}\n              </Index>\n            </Select.ItemGroup>\n          </Select.Content>\n        </Select.Positioner>\n      </Portal>\n    </Select.Root>\n  )\n}\n",
  "Controlled": "import { Select } from '@ark-ui/solid'\nimport { createSignal } from 'solid-js'\nimport { Index, Portal } from 'solid-js/web'\n\nconst Controlled = () => {\n  type Item = { label: string; value: string; disabled?: boolean }\n  const [, setSelectedItems] = createSignal<Item[]>([])\n\n  const items: Item[] = [\n    { label: 'React', value: 'react' },\n    { label: 'Solid', value: 'solid' },\n    { label: 'Vue', value: 'vue' },\n    { label: 'Svelte', value: 'svelte', disabled: true },\n  ]\n\n  return (\n    <Select.Root items={items} onValueChange={(e) => setSelectedItems(e.items)}>\n      <Select.Label>Framework</Select.Label>\n      <Select.Control>\n        <Select.Trigger>\n          <Select.ValueText placeholder=\"Select a Framework\" />\n        </Select.Trigger>\n        <Select.ClearTrigger>Clear</Select.ClearTrigger>\n      </Select.Control>\n      <Portal>\n        <Select.Positioner>\n          <Select.Content>\n            <Select.ItemGroup id=\"framework\">\n              <Select.ItemGroupLabel for=\"framework\">Frameworks</Select.ItemGroupLabel>\n              <Index each={items}>\n                {(item) => (\n                  <Select.Item item={item()}>\n                    <Select.ItemText>{item().label}</Select.ItemText>\n                    <Select.ItemIndicator>✓</Select.ItemIndicator>\n                  </Select.Item>\n                )}\n              </Index>\n            </Select.ItemGroup>\n          </Select.Content>\n        </Select.Positioner>\n      </Portal>\n    </Select.Root>\n  )\n}\n",
  "FormLibrary": "import { createForm } from '@felte/solid'\n\nconst FormLibrary = () => {\n  type Inputs = {\n    framework: string[]\n  }\n  const items = ['React', 'Solid', 'Vue']\n  const { form } = createForm({\n    onSubmit: (values) => {\n      alert(JSON.stringify(data, null, 4))\n    },\n  })\n\n  return (\n    <form use:form>\n      <input type=\"text\" name=\"email\" />\n      <input type=\"password\" name=\"password\" />\n      <button type=\"submit\">Sign In</button>\n    </form>\n  )\n\n  // const [_, { Form, Field }] = createForm<Inputs>()\n\n  // const handleSubmit: SubmitHandler<Inputs> = (data) => alert(JSON.stringify(data, null, 4))\n\n  // return (\n  //   <Form onSubmit={handleSubmit}>\n  //     {/* <Field name=\"framework\" type=\"string[]\">\n  //       {(field, props) => (\n  //         // Set \"multiple\" to \"true\"\n  //         <select {...props} multiple>\n  //           <For\n  //             each={[\n  //               { label: 'Preact', value: 'preact' },\n  //               { label: 'Solid', value: 'solid' },\n  //               { label: 'Qwik', value: 'qwik' },\n  //             ]}\n  //           >\n  //             {({ label, value }) => (\n  //               <option value={value} selected={field.value?.includes(value)}>\n  //                 {label}\n  //               </option>\n  //             )}\n  //           </For>\n  //         </select>\n  //       )}\n  //     </Field> */}\n\n  //     <Field name=\"framework\" type=\"string[]\">\n  //       {(field, props) => (\n  //         <Select.Root items={items} value={field.value} {...props}>\n  //           <Select.Label>Framework</Select.Label>\n  //           <Select.Control>\n  //             <Select.Trigger>\n  //               <Select.ValueText placeholder=\"Select a Framework\" />\n  //               <Select.Indicator>▼</Select.Indicator>\n  //             </Select.Trigger>\n  //             <Select.ClearTrigger>Clear</Select.ClearTrigger>\n  //           </Select.Control>\n  //           <Select.Positioner>\n  //             <Select.Content>\n  //               <Select.ItemGroup id=\"framework\">\n  //                 <Select.ItemGroupLabel for=\"framework\">Frameworks</Select.ItemGroupLabel>\n  //                 <Index each={items}>\n  //                   {(item) => (\n  //                     <Select.Item item={item()}>\n  //                       <Select.ItemText>{item()}</Select.ItemText>\n  //                       <Select.ItemIndicator>✓</Select.ItemIndicator>\n  //                     </Select.Item>\n  //                   )}\n  //                 </Index>\n  //               </Select.ItemGroup>\n  //             </Select.Content>\n  //           </Select.Positioner>\n  //         </Select.Root>\n  //       )}\n  //     </Field>\n  //     <button type=\"submit\">Submit</button>\n  //   </Form>\n  // )\n}\n"
}
